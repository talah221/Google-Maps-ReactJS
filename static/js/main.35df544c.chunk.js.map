{"version":3,"sources":["cmps/MapContainer.jsx","pages/MainApp.jsx","App.jsx","serviceWorker.js","reducers/userReducer.js","reducers/systemReducer.js","reducers/mainReducer.js","reducers/index.js","store.js","index.js"],"names":["_GoogleMap","style","height","margin","state","markers","infoWindows","onMapClicked","mapProps","map","ev","console","log","latLng","lat","lng","setState","name","position","center","cleanMap","markerClicked","props","marker","event","txt","Fragment","Button","onClick","this","disabled","length","variant","color","initialCenter","google","zoom","index","key","window","idx","React","Component","MapContainer","GoogleApiWrapper","apiKey","MainApp","className","App","path","component","Boolean","location","hostname","match","localLoggedinUser","sessionStorage","user","JSON","parse","initialState","loggedInUser","users","isLoading","items","filterBy","rootReducer","combineReducers","system","action","type","main","item","_id","filter","itemId","userId","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.35df544c.chunk.js","sourcesContent":["import React from 'react';\r\nimport { GoogleApiWrapper, Map, Marker, InfoWindow } from 'google-maps-react';\r\nimport { Button } from '@material-ui/core';\r\n\r\nclass _GoogleMap extends React.Component {\r\n  style = {\r\n    height: '60%',\r\n    margin: '30px',\r\n  };\r\n  state = {\r\n    markers: [],\r\n    infoWindows: [],\r\n  };\r\n\r\n  onMapClicked = (mapProps, map, ev) => {\r\n    console.log('map clicked!');\r\n    const { latLng } = ev;\r\n    const lat = latLng.lat();\r\n    const lng = latLng.lng();\r\n    this.setState({\r\n      markers: [\r\n        ...this.state.markers,\r\n        { name: 'Enter Position Name', position: { lat, lng } },\r\n      ],\r\n      center: { lat, lng },\r\n    });\r\n  };\r\n\r\n  cleanMap = () => {\r\n    this.setState({ markers: [], infoWindows: [] });\r\n  };\r\n\r\n  markerClicked = (props, marker, event) => {\r\n    console.log('Marker clicked!');\r\n    console.log('props:', props, ' marker:', marker, 'event', event);\r\n    const latLng = props.position;\r\n    this.setState(\r\n      {\r\n        infoWindows: [\r\n          ...this.state.infoWindows,\r\n          { position: latLng, txt: 'Window TXT' },\r\n        ],\r\n      },\r\n      () => {\r\n        console.log(this.state);\r\n      }\r\n    );\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <Button\r\n          onClick={this.cleanMap}\r\n          disabled={!this.state.markers.length > 0}\r\n          variant='contained'\r\n          color='primary'\r\n        >\r\n          Clean Map\r\n        </Button>\r\n        {!this.state.markers.length>0 && <h3>Click on map to add Markers!</h3>}\r\n\r\n        <Map\r\n          style={this.style}\r\n          initialCenter={{ lat: 32.0853, lng: 34.7818 }}\r\n          // center={this.state.center}\r\n          onClick={this.onMapClicked}\r\n          google={this.props.google}\r\n          zoom={14}\r\n        >\r\n          {this.state.markers.map((marker, index) => (\r\n            <Marker\r\n              onClick={this.markerClicked}\r\n              key={index}\r\n              position={marker.position}\r\n            />\r\n          ))}\r\n\r\n          {this.state.infoWindows.map((window, idx) => {\r\n            return (\r\n              <InfoWindow key={idx} position={window.position}>\r\n                <h3>{window.txt}</h3>\r\n              </InfoWindow>\r\n            );\r\n          })}\r\n\r\n          {/* {this.state.center && (\r\n            <InfoWindow position={this.state.center} visible={true}>\r\n              <input type='text' value='asd' />\r\n            </InfoWindow>\r\n          )} */}\r\n        </Map>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport const MapContainer = GoogleApiWrapper({\r\n  apiKey: 'AIzaSyA7wFxeGayDFtxLfft53sDr7sMu9cj7Vio',\r\n})(_GoogleMap);\r\n","import React, { Component } from 'react';\r\nimport { MapContainer } from '../cmps/MapContainer';\r\n\r\nexport class MainApp extends Component {\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div className='main-app-container'>\r\n        <h1>Google Maps</h1>\r\n        <div className='map-container'>\r\n          <MapContainer />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\nimport { HashRouter as Router, Switch, Route } from 'react-router-dom';\n// import { About } from './pages/About';\nimport { MainApp } from './pages/MainApp'\n\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Switch>\n          {/* <Route path=\"/about\" component={About} /> */}\n          <Route path=\"/\" component={MainApp} />\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","let localLoggedinUser = null;\r\nif (sessionStorage.user) localLoggedinUser = JSON.parse(sessionStorage.user);\r\n\r\nconst initialState = {\r\n  loggedInUser: localLoggedinUser,\r\n  users: []\r\n};\r\n\r\nexport default function(state = initialState, action = {}) {\r\n  switch (action.type) {\r\n    case 'SET_USER':\r\n      return { ...state, loggedInUser: action.user };\r\n    case 'USER_REMOVE':\r\n      return {\r\n        ...state,\r\n        users: state.users.filter(user => user._id !== action.userId)\r\n      };\r\n    case 'SET_USERS':\r\n      return { ...state, users: action.users };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","const initialState = {\r\n  isLoading: false\r\n};\r\n\r\nexport default function (state = initialState, action = {}) {\r\n  switch (action.type) {\r\n    case 'LOADING_START':\r\n      return { ...state, isLoading: true };\r\n    case 'LOADING_DONE':\r\n      return { ...state, isLoading: false };\r\n    default: return state;\r\n  }\r\n}\r\n","\r\nconst initialState = {\r\n    items: [],\r\n    filterBy: null\r\n}\r\n\r\nexport function mainReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case 'SET_ITEMS':\r\n            return {\r\n                ...state,\r\n                items: action.items\r\n            }\r\n        case 'SET_FILTER':\r\n            return {\r\n                ...state,\r\n                filterBy: action.items\r\n            }\r\n        case 'ADD_ITEM':\r\n            return {\r\n                ...state,\r\n                items: [...state.items, action.item]\r\n            }\r\n        case 'UPDATE_ITEM':\r\n            return {\r\n                ...state,\r\n                items: state.items.map(item => {\r\n                    if (item._id === action.item._id) return action.item;\r\n                    return item;\r\n                })\r\n            }\r\n        case 'REMOVE_ITEM':\r\n            return {\r\n                ...state,\r\n                items: state.items.filter(item => item._id !== action.itemId)\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","import { combineReducers } from 'redux';\r\nimport userReducer from './userReducer'\r\nimport systemReducer from './systemReducer';\r\nimport { mainReducer } from './mainReducer';\r\n\r\nconst rootReducer = combineReducers({\r\n  system: systemReducer,\r\n  main: mainReducer,\r\n  user: userReducer\r\n})\r\n\r\nexport default rootReducer;","import { createStore, applyMiddleware, compose } from 'redux';\r\n\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers/index.js';\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nexport const store = createStore(\r\n  rootReducer,\r\n  composeEnhancers(applyMiddleware(thunk))\r\n);\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\nimport './assets/styles/global.scss'\nimport { store } from './store';\n\nReactDOM.render(\n  <Provider store={ store }>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}